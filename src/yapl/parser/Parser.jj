PARSER_BEGIN(Parser)

package yapl.parser;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import yapl.exceptions.IllegalUseException;
import yapl.exceptions.ProcedureNameMismatchException;
import yapl.exceptions.ProgramNameMismatchException;
import yapl.exceptions.YAPLException;
import yapl.impl.*;
import yapl.interfaces.CompilerError;
import yapl.interfaces.IAttrib;
import yapl.interfaces.ICodeGen;
import yapl.interfaces.ISymbol;
import yapl.lib.*;

public class Parser {
    private static SymbolTable symbolTable = new SymbolTable();
    private static Token tProgramName = null;
    private static boolean displayInfo = false;    // set to true for extra compiler information
    private static ICodeGen codeGen;

    public static void main(String args[]) {
        try {
            String file, outfile;
            if (args == null || args.length < 2) {
                file = "testFiles/typecheck/test06.yapl";
                outfile = "out.asm";
            } else {
                file = args[0];
                outfile = args[1];                
            }
            System.out.println("args: " + file + " --  " + outfile);
            Parser parser = new Parser(new FileInputStream(file));
            codeGen = new CodeGen(new PrintStream(outfile));
            parser.Program();

            CompilerMessage.printOK(tProgramName.image);
        } catch (ParseException pe) {
            CompilerMessage.printError(pe, tProgramName.image);
        } catch (YAPLException ye) {
            CompilerMessage.printError(ye, tProgramName.image);
        } catch (IOException e) {
            System.err.println("something went wrong" + e);
        }
    }
    
    /** Output function for additional information */
    private static void info(String s) {
      if(displayInfo)
		System.out.println("> Compiler: " + s);
    }
    
    /** Output function for additional information */
    private static void info(String s, Token t) {
		info(s + " '"+t.image+"'");
    }
}

PARSER_END(Parser)

SKIP :
{
 " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < IF: "If" >
|
  < DO: "Do" >
|
  < OR: "Or" >
|
  < AND: "And" >
|
  < END: "End" >
|
  < INT: "int" >
|
  < NEW: "new" >
|
  < VOID: "void" >
|
  < TRUE: "True" >
|
  < ELSE: "Else" >
|
  < BOOL: "bool" >
|
  < THEN: "Then" >
|
  < FALSE: "False" >
|
  < WHILE: "While" >
|
  < WRITE: "Write" >
|
  < ENDIF: "EndIf" >
|
  < BEGIN: "Begin" >
|
  < CONST: "Const" >
|
  < RECORD: "Record" >
|
  < RETURN: "Return" >
|
  < DECLARE: "Declare" >
|
  < PROGRAM: "Program" >
|
  < ENDWHILE: "EndWhile" >
|
  < READONLY: "readonly" >
|
  < PROCEDURE: "Procedure" >
|
  < ENDRECORD: "EndRecord" >
|
  < #LETTER: ["a"-"z","A"-"Z","_"] >
|
  < #DIGIT: ["0"-"9"] >
|
  < LT: "<" >
|
  < LEQ: "<=" >
|
  < GT: ">" >
|
  < GEQ: ">=" >
|
  < EQ: "==" >
|
  < NEQ: "!=" >
|
  < PLUS: "+" >
|
  < MINUS: "-" >
|
  < MULT: "*" >
|
  < DIV: "/" >
|
  < MOD: "%" >
|
  < SQUARE_BRACKET_OPEN: "[" >
|
  < SQUARE_BRACKET_CLOSE: "]" >
|
  < DOT: "." >
|
  < HASH: "#" >
|
  < OPEN_PARENTH: "(" >
|
  < CLOSE_PARENTH: ")" >
|
  < COMMA: "," >
|
  < ASSIGN: ":=" >
|
  < SEMICOLON: ";" >
|
  < CONST_ASSIGN: "=" >
|
  < COMMENT_OPEN: "/*" >
|
  < COMMENT_CLOSE: "*/" >
|
  < QUOTE: "\"" >
|
  < #OTHERCHAR: "+" | "-" | "*" | "/" | "." | "," | ";" | ":" | "!" | "?" | "=" | "#" | "%" | "<" | ">" | "$" | "(" | ")" | "[" | "]" | "{" | "}" | "\\" | "@" | "&" | "^" | "|" >
|
  < IDENT: <LETTER> ( <LETTER> | <DIGIT> )* >
|
  < NUMBER: <DIGIT> ( <DIGIT> )* >
|
  < STRING: <QUOTE> ( " " | <LETTER> | <DIGIT> | <OTHERCHAR> )* <QUOTE> >
}

SPECIAL_TOKEN:
{
  < COMMENT: <COMMENT_OPEN> (~["*"] | (["*"]~["/"]))* <COMMENT_CLOSE> >
}

Token RelOp() throws YAPLException :
{
    {info("Found: RelOp");}
    Token tOp;
}
{
    (tOp=<LT> | tOp=<LEQ> | tOp=<GEQ> | tOp=<GT>)
    {
        return tOp;
    }
}

Token EqualOp() throws YAPLException :
{
    {info("Found: EqualOp");}
    Token tOp;
}
{
    (tOp=<EQ> | tOp=<NEQ>)
    {
        return tOp;
    }
}

Token AddOp() throws YAPLException :
{
    {info("Found: AddOp");}
    Token tok;
}
{
    (tok=<PLUS> | tok=<MINUS>)
    {
        return tok;
    }
}

Token MulOp() throws YAPLException :
{
    {info("Found: MulOp");}
    Token tOp;
}
{
    (tOp=<MULT> | tOp=<DIV> | tOp=<MOD>)
    {
        return tOp;
    }
}

/* Literal = "True" | "False" | number . */
IAttrib Literal() throws YAPLException :
{
	{info("Found: Literal");}
	Token tok;
        IAttrib attrib;
}
{

	(
            tok = <TRUE>				{info("Found: <TRUE>");}
            { attrib = new Attrib(Attrib.Constant, new BoolType(true)); }

            | tok = <FALSE>			{info("Found: <FALSE>");}
            { attrib = new Attrib(Attrib.Constant, new BoolType(false)); }

            | tok = <NUMBER>	{info("Found: <NUMBER>", tok);}
            { attrib = new Attrib(Attrib.Constant,new IntType(Integer.parseInt(tok.image)) ); }
        )
        {
            attrib.setKind(IAttrib.Constant);
            attrib.setToken(tok);
            return attrib;
        }
}

IAttrib Selector(IAttrib parent) throws YAPLException :
{
    {info("Found: Selector");}
    Token tIdent, selector;
    Type type = parent.getType();
    IAttrib attr;
    IAttrib idx;
}
{
    ( selector=<SQUARE_BRACKET_OPEN> idx = Expr() <SQUARE_BRACKET_CLOSE>
        {
            if (!(type instanceof ArrayType))
                throw new YAPLException(CompilerError.SelectorNotArray, selector);
            type = ((ArrayType)type).subarray(1);

            if (!(idx.getType() instanceof IntType))
                throw new YAPLException(CompilerError.BadArraySelector, selector);

            codeGen.arrayOffset(parent, idx);
            attr = parent;  
        }
    | <DOT> tIdent=<IDENT>
        {
            if (!(type instanceof RecordType))
                throw new YAPLException(CompilerError.SelectorNotRecord, tIdent);
            
            ISymbol sym = ((RecordType)type).getMember(tIdent.image);
            if (sym == null)
                throw new YAPLException(CompilerError.InvalidRecordField, tIdent);            
            /*type = sym.getType();
            attr = new Attrib(type, parent.isConstant());
            attr.setToken(tIdent);
            attr.setKind(IAttrib.Address);*/
            attr = parent;
            codeGen.recordOffset(attr, sym);
        }
    ) [ attr=Selector(attr) ]
    {
        return attr;
    }
}

IAttrib ArrayLen() throws YAPLException :
{
    {info("Found: ArrayLen");}
    Token tIdent;
    IAttrib arrayAttr;
    IAttrib resultAttr;
}
{
    <HASH> tIdent=<IDENT>
        {
            ISymbol s = symbolTable.lookup(tIdent);

            if (s.getKind() != ISymbol.Variable && s.getKind() != ISymbol.Parameter)
                throw new IllegalUseException(s, tIdent);
            
            arrayAttr = new Attrib(s);            
            arrayAttr.setKind(IAttrib.Address);            
            arrayAttr.setToken(tIdent);
        }
    [ arrayAttr = Selector(arrayAttr) ]
    {
        if (!(arrayAttr.getType() instanceof ArrayType))
            throw new YAPLException(CompilerError.ArrayLenNotArray, tIdent);

        resultAttr = codeGen.arrayLength(arrayAttr);        
        resultAttr.setToken(tIdent);
        return resultAttr;
    }
}

IAttrib PrimaryExpr() throws YAPLException :
{
    {info("Found: PrimaryExpr");}
    Token tIdent;
    IAttrib resultAttr;
}
{
    (
        resultAttr = Literal() | <OPEN_PARENTH> resultAttr = Expr() <CLOSE_PARENTH>
         | LOOKAHEAD(2) resultAttr = ProcedureCall()
            {
                if (resultAttr.getType() instanceof VoidType)
                    throw new YAPLException(CompilerError.ProcNotFuncExpr, resultAttr.getToken());
            }
         | tIdent=<IDENT> 
            {
                ISymbol s = symbolTable.lookup(tIdent);
                if (s.getKind() != ISymbol.Variable && s.getKind() != ISymbol.Constant && s.getKind() != ISymbol.Parameter)
                    throw new IllegalUseException(s, tIdent);
                resultAttr = new Attrib(s);
                if(s.getKind() == ISymbol.Constant)
                    resultAttr.setKind(IAttrib.Constant);
                else if (s.getKind() == ISymbol.Variable)
                    resultAttr.setKind(IAttrib.Address);
                else if (s.getKind() == ISymbol.Parameter) {
                    resultAttr.setKind(IAttrib.Address);
                }
                resultAttr.setToken(tIdent);
            }
        [ resultAttr = Selector(resultAttr) ] | resultAttr = ArrayLen()
    )
    {
        codeGen.loadReg(resultAttr);
        return resultAttr;
    }
}

IAttrib UnaryExpr() throws YAPLException :
{
    {info("Found: UnaryExpr");}
    IAttrib resultAttr;
    Token tAddOp = null;
    boolean opSeen = false;
}
{
    [ tAddOp=AddOp() { opSeen = true; } ] resultAttr = PrimaryExpr()
    {
        if (opSeen) {
            if(!(resultAttr.getType() instanceof IntType))
                throw new YAPLException(CompilerError.IllegalOp1Type, resultAttr.getToken());
            else if (tAddOp.image.equals("-"))
                codeGen.neg(resultAttr);                
        }         
                
        return resultAttr;
    }
}

IAttrib MulExpr() throws YAPLException :
{
    {info("Found: MulExpr");}
    IAttrib lvalue, rvalue;
    Token tOp;
}
{
    lvalue = UnaryExpr() 
    {
        codeGen.loadReg(lvalue);
    }
    (
        tOp=MulOp() rvalue = UnaryExpr()
        {
            if (!(lvalue.getType() instanceof IntType))
                throw new YAPLException(CompilerError.IllegalOp2Type, lvalue.getToken());
            if (!(rvalue.getType() instanceof IntType))
                throw new YAPLException(CompilerError.IllegalOp2Type, rvalue.getToken());

            codeGen.loadReg(rvalue);
            codeGen.op2(lvalue, tOp, rvalue);                        
        }
    )*
    {        
        return lvalue;
    }
}

IAttrib AddExpr() throws YAPLException :
{
    {info("Found: AddExpr");}
    IAttrib lvalue, rvalue;
    Token tOp;
}
{
    lvalue = MulExpr()
    {
        codeGen.loadReg(lvalue);
    }
    (
        tOp=AddOp() rvalue = MulExpr()
        {
            if (!(lvalue.getType() instanceof IntType))
                throw new YAPLException(CompilerError.IllegalOp2Type, lvalue.getToken());
            if (!(rvalue.getType() instanceof IntType))
                throw new YAPLException(CompilerError.IllegalOp2Type, rvalue.getToken());

            codeGen.loadReg(rvalue);
            codeGen.op2(lvalue, tOp, rvalue);                        
        }
    )*
    {
        return lvalue;
    }
}

IAttrib RelExpr() throws YAPLException :
{
    {info("Found: RelExpr");}
    IAttrib lvalue, rvalue = null;
    Token tOp;
}
{
    lvalue = AddExpr()
    {
        codeGen.loadReg(lvalue);
    }
    [
        tOp=RelOp() rvalue = AddExpr()
        {
            if (!(lvalue.getType() instanceof IntType)) { info("lvalue: " + lvalue.getType());
                throw new YAPLException(CompilerError.IllegalRelOpType, lvalue.getToken()); }
            if (!(rvalue.getType() instanceof IntType)) { info("rvalue: " + rvalue.getType());
                throw new YAPLException(CompilerError.IllegalRelOpType, rvalue.getToken()); }

            codeGen.loadReg(rvalue);
            codeGen.relOp(lvalue, tOp, rvalue);                        
        }
    ]
    {
        return lvalue;
    }
}

IAttrib EqualExpr() throws YAPLException :
{
    {info("Found: EqualExpr");}
    IAttrib lvalue, rvalue = null;
    Token tOp;
}
{
    lvalue = RelExpr()
    {
        codeGen.loadReg(lvalue);
    }
    [
        tOp=EqualOp() rvalue = RelExpr()
        {
            if (!lvalue.getType().isCompatible(rvalue.getType()))
                throw new YAPLException(CompilerError.IllegalEqualOpType, lvalue.getToken());
            if (!((lvalue.getType() instanceof IntType && rvalue.getType() instanceof IntType) || (lvalue.getType() instanceof BoolType && rvalue.getType() instanceof BoolType)))
                throw new YAPLException(CompilerError.IllegalEqualOpType, lvalue.getToken());

            codeGen.loadReg(rvalue);
            codeGen.relOp(lvalue, tOp, rvalue);                        
        }
    ]
    {
        return lvalue;
    }
}

IAttrib CondAndExpr() throws YAPLException :
{
    {info("Found: CondAndExpr");}
    IAttrib lvalue, rvalue;
    Token tOp;
}
{
    lvalue = EqualExpr()
    {
        codeGen.loadReg(lvalue);
    }
    (
        tOp=<AND> rvalue = EqualExpr()
        {
            if (!(lvalue.getType() instanceof BoolType))
                throw new YAPLException(CompilerError.IllegalOp2Type, lvalue.getToken());
            if (!(rvalue.getType() instanceof BoolType))
                throw new YAPLException(CompilerError.IllegalOp2Type, rvalue.getToken());

            codeGen.loadReg(rvalue);
            codeGen.op2(lvalue, tOp, rvalue);
        }        
    )*
    {
        return lvalue;
    }
}

IAttrib CreationExpr() throws YAPLException :
{
    {info("Found: CreationExpr");}
    Type type;
    IAttrib dim1 = null, dim2 = null;
    Token newTok;
}
{
    newTok = <NEW> type = StaticType()
    [
        {
            type = new ArrayType(type);
            ((ArrayType)type).setDim(1);
        }
        <SQUARE_BRACKET_OPEN> dim1 = Expr() <SQUARE_BRACKET_CLOSE>
        {
            if (!(dim1.getType() instanceof IntType))
                throw new YAPLException(CompilerError.BadArraySelector, dim1.getToken());
        }
        [
            <SQUARE_BRACKET_OPEN> dim2 = Expr() <SQUARE_BRACKET_CLOSE>
            {
                type = new ArrayType(type);

                if (!(dim2.getType() instanceof IntType))
                    throw new YAPLException(CompilerError.BadArraySelector, dim2.getToken());
            }
        ]
    ]
    {        
        IAttrib resultAttr;
        if (type instanceof ArrayType)
            resultAttr = codeGen.allocArray((ArrayType)type, dim1, dim2);
        else if (type instanceof RecordType)
            resultAttr = codeGen.allocRecord((RecordType)type);
        else
            throw new YAPLException(CompilerError.Syntax, "new Operator may only be used with Records or Arrays");
        resultAttr.setToken(newTok);
        return resultAttr;
    }
}

IAttrib Expr() throws YAPLException :
{
    {info("Found: Expr");}
    IAttrib lvalue, rvalue;
    Token tOp;
}
{
    (
        lvalue = CondAndExpr()
        {
            codeGen.loadReg(lvalue);
        }
        (
            tOp=<OR> rvalue = CondAndExpr()
            {
                if (!(lvalue.getType() instanceof BoolType)) { info("lvalue not bool in Expr(), is " + lvalue.getType());
                    throw new YAPLException(CompilerError.IllegalOp2Type, lvalue.getToken()); }
                if (!(rvalue.getType() instanceof BoolType)) { info("rvalue not bool in Expr(), is " + lvalue.getType());
                    throw new YAPLException(CompilerError.IllegalOp2Type, rvalue.getToken()); }

                codeGen.loadReg(rvalue);
                codeGen.op2(lvalue, tOp, rvalue);
            }
        )* | lvalue = CreationExpr()
    )
    {       
        return lvalue;
    }
}

List<IAttrib> ArgumentList(ProcedureSymbol s) throws YAPLException :
{
    {info("Found: ArgumentList");}
    int i = 0;
    List<IAttrib> arguments = new ArrayList<IAttrib>();
    int paramCount = s.getParametersCount();
    IAttrib arg, firstArg;
    ISymbol param;
}
{
    firstArg = Expr()
    {
        arg = firstArg;
        if (i > paramCount - 1)
            throw new YAPLException(CompilerError.ArgNotApplicable, arg.getToken());
        param = s.getParameter(i);
        if (!arg.getType().isCompatible(param.getType()))
            throw new YAPLException(CompilerError.ArgNotApplicable, arg.getToken());
        if (arg.isConstant() && !(param.getType() instanceof IntType) && !(param.getType() instanceof BoolType) && !param.isReadonly())
            throw new YAPLException(CompilerError.ReadonlyArg, arg.getToken());
        i++;
        arguments.add(arg);
    }
    (
        <COMMA> arg = Expr()
        {
            if (i > paramCount - 1)
                throw new YAPLException(CompilerError.ArgNotApplicable, arg.getToken());
            param = s.getParameter(i);
            if (!arg.getType().isCompatible(param.getType()))
                throw new YAPLException(CompilerError.ArgNotApplicable, arg.getToken());
            if (arg.isConstant() && !(param.getType() instanceof IntType) && !(param.getType() instanceof BoolType) && !param.isReadonly())
                throw new YAPLException(CompilerError.ReadonlyArg, arg.getToken());
            i++;
            arguments.add(arg);
        }
    )*
    {
        if (i < paramCount)
            throw new YAPLException(CompilerError.TooFewArgs, firstArg.getToken());

        return arguments;
    }
}

IAttrib ProcedureCall() throws YAPLException :
{
    {info("Found: ProcedureCall");}
    Token tIdent;
    IAttrib resultAttr;
    List<IAttrib> arguments = null;
}
{
    tIdent=<IDENT> 
        {
            ISymbol s = symbolTable.lookup(tIdent);
            if (!(s instanceof ProcedureSymbol))
                throw new IllegalUseException(s, tIdent);
            resultAttr = new Attrib(s);          
            resultAttr.setToken(tIdent);
        }
    <OPEN_PARENTH> [ arguments = ArgumentList((ProcedureSymbol)s) ] <CLOSE_PARENTH>
    {
        if (arguments == null && ((ProcedureSymbol)s).getParametersCount() > 0)
            throw new YAPLException(CompilerError.TooFewArgs, tIdent);
        
        if(arguments != null)
            for(IAttrib a : arguments)
                codeGen.loadReg(a); //unnecessary

        byte returnReg = codeGen.callProc(tIdent.image, arguments, s.getType() instanceof VoidType);
        
        if(returnReg != (byte)-1) {
            resultAttr.setKind(IAttrib.Register);
            resultAttr.setRegister(returnReg);
        }

        return resultAttr;
    }
}

void Assignment() throws YAPLException :
{
    {info("Found: Assignment");}
    Token tIdent;
    IAttrib lvalue, rvalue;
}
{
    tIdent=<IDENT> 
        {
            ISymbol s = symbolTable.lookup(tIdent);
            if (s.getKind() != ISymbol.Variable && s.getKind() != ISymbol.Parameter)
                throw new IllegalUseException(s, tIdent);
            lvalue = new Attrib(s);
            lvalue.setKind(IAttrib.Address);
            lvalue.setToken(tIdent);
        }
    [ lvalue = Selector(lvalue) ] <ASSIGN> rvalue = Expr()
    {
        if (lvalue.isConstant())
            throw new YAPLException(CompilerError.ReadonlyAssign, tIdent);
        if (!lvalue.getType().isCompatible(rvalue.getType())) { info("lvalue: " + lvalue.getType() + " rvalue: " + rvalue.getType());
            throw new YAPLException(CompilerError.TypeMismatchAssign, tIdent); }

        if (rvalue.isConstant() && (rvalue.getType() instanceof ArrayType || rvalue.getType() instanceof RecordType))
            lvalue.setConstant(true);

        codeGen.assign(lvalue, rvalue);        
    }
}

void IfStatement() throws YAPLException :
{
    {info("Found: IfStatement");}
    IAttrib attr;
    String lElse, lEnd;
    boolean elseSeen = false;
}
{
    <IF> attr = Expr()
    {
        if (!(attr.getType() instanceof BoolType))
            throw new YAPLException(CompilerError.CondNotBool, attr.getToken());
            
        lElse = codeGen.newLabel();
        lEnd = codeGen.newLabel();
        codeGen.branchIfFalse(attr, lElse);        
    }
    <THEN> StatementList()    
    [ <ELSE> 
    {
        codeGen.jump(lEnd);
        elseSeen = true;
        codeGen.assignLabel(lElse);
    }
    StatementList() ] <ENDIF>
    {
        if(!elseSeen)   codeGen.assignLabel(lElse);
        else            codeGen.assignLabel(lEnd);
    }
}

void WhileStatement() throws YAPLException :
{
    {info("Found: WhileStatement");}
    IAttrib attr;
    String lBegin, lEnd;
}
{
    {
        lBegin = codeGen.newLabel();
        lEnd = codeGen.newLabel();
        codeGen.assignLabel(lBegin, "while " + lBegin);        
    }
    <WHILE> attr = Expr()
    {
        if (!(attr.getType() instanceof BoolType))
            throw new YAPLException(CompilerError.CondNotBool, attr.getToken());        
        
        codeGen.branchIfFalse(attr, lEnd);
    }
    <DO> StatementList() <ENDWHILE>
    {
        codeGen.jump(lBegin);
        codeGen.assignLabel(lEnd, "end while " + lBegin);
    }
}

void ReturnStatement() throws YAPLException :
{
    {info("Found: ReturnStatement");}
    IAttrib retAttr = new Attrib(new VoidType(), true);
    Token returnTok;
}
{
    returnTok = <RETURN> [ retAttr = Expr() ]
    {
        retAttr.setToken(returnTok);
        ISymbol s = symbolTable.getNearestParentSymbol(ISymbol.Procedure);
        if (s == null)
            s = symbolTable.getNearestParentSymbol(ISymbol.Program);
        s.setReturnSeen(true);
        if (s.getType() instanceof VoidType && !(retAttr.getType() instanceof VoidType)) {
            if (s.getKind() == ISymbol.Procedure)
                throw new YAPLException(CompilerError.IllegalRetValProc, retAttr.getToken());
            else
                throw new YAPLException(CompilerError.IllegalRetValMain, retAttr.getToken());
        }
        if(!s.getType().isCompatible(retAttr.getType()))
            throw new YAPLException(CompilerError.InvalidReturnType, retAttr.getToken());

        if(s.getKind() == ISymbol.Procedure) {
            codeGen.returnFromProc(s.getName(), retAttr);
        }
    }
}

void WriteStatement() throws YAPLException :
{
    {info("Found: WriteStatement");}
    Token tStr;
}
{
    <WRITE> tStr=<STRING>
    {    
        codeGen.writeString(tStr.image.replace("\"", ""));
    }
}

void Statement() throws YAPLException :
{
    {info("Found: Statement");}}
{
    IfStatement() | WhileStatement() | ReturnStatement() | WriteStatement() | LOOKAHEAD(3) Assignment() | ProcedureCall() | Block()
}

void StatementList() throws YAPLException :
{
    {info("Found: StatementList");}}
{
    ( Statement() <SEMICOLON> )*
}

void Block() throws YAPLException :
{
    {info("Found: Block");}}
{   { symbolTable.openScope(false); }
    [ Decl() ] <BEGIN> StatementList() <END>
    { symbolTable.closeScope(); }
}

Type StaticType() throws YAPLException :
{
    {info("Found: StaticType");}
    Token tIdent;
}
{
    <INT>
        {
            info("Found: <INT>");
            return new IntType();
        }

    | <BOOL>
        {
            info("Found: <BOOL>");
            return new BoolType();
        }

    | tIdent=<IDENT> 
        {
            ISymbol s = symbolTable.lookup(tIdent);
            if (s.getKind() != ISymbol.Typename) 
                throw new IllegalUseException(s, tIdent);
            info("Found: Typename " + s);
            return s.getType();
        }
}

Type Type() throws YAPLException :
{
    info("Found: Type");
    Type t;
}
{
    t = StaticType()
    ( 
        <SQUARE_BRACKET_OPEN><SQUARE_BRACKET_CLOSE>
        { t = new ArrayType(t); }
    )*

    {
        return t;
    }
}

Type ReturnType() throws YAPLException :
{
    {info("Found: ReturnType");}
    Type t;
}
{
    (
        <VOID> { t = new VoidType(); }
        | t = Type()
    )
    {
        return t;
    }
}

void ConstDecl() throws YAPLException :
{
    {info("Found: ConstDecl");}
    Token tIdent;
    IAttrib rValue, lValue;
}
{
    <CONST> tIdent=<IDENT> 
        {
            ISymbol s = new Symbol(tIdent, ISymbol.Constant);
            symbolTable.addSymbol(s);                           
        }
    <CONST_ASSIGN> rValue=Literal() <SEMICOLON>
    {
        rValue.setKind(IAttrib.Constant);
        s.setType(rValue.getType());                 
        codeGen.allocVariable(s);  
        
        lValue = new Attrib(s);
        lValue.setKind(IAttrib.Address);
        codeGen.assign(lValue, rValue);        
    }
}

void VarDecl(ISymbol recordSymbol) throws YAPLException :
{
    {info("Found: VarDecl");}
    Token tIdent;
    Type type;
}
{
    type = Type() tIdent=<IDENT> 
        {
            ISymbol s = new Symbol(tIdent, ISymbol.Variable);
            s.setType(type);
            symbolTable.addSymbol(s);
            if (recordSymbol != null)
                ((RecordType)recordSymbol.getType()).addMember(s);
            else
                codeGen.allocVariable(s);
        } 
    ( <COMMA> tIdent=<IDENT>
        {
            s = new Symbol(tIdent, ISymbol.Variable);
            s.setType(type);
            symbolTable.addSymbol(s);
            if (recordSymbol != null)
                ((RecordType)recordSymbol.getType()).addMember(s);
            else
                codeGen.allocVariable(s);
        }
    )* <SEMICOLON>
}

void TypeDecl() throws YAPLException :
{
    {info("Found: TypeDecl");}
    Token tIdent;
}
{
    <RECORD> tIdent=<IDENT>
        {
            ISymbol s = new Symbol(tIdent, ISymbol.Typename);
            RecordType rt = new RecordType();
            s.setType(rt);
            symbolTable.addSymbol(s);
            symbolTable.openScope(false);
        }
    (VarDecl(s) )+ 
        {
            symbolTable.closeScope();
        }
    <ENDRECORD> <SEMICOLON>
}

void Decl() throws YAPLException :
{
    {info("Found: Decl");}}
{
    <DECLARE> ( ConstDecl() | VarDecl(null) | TypeDecl() )*
}

ISymbol FormalParam() throws YAPLException :
{
    {info("Found: FormalParam");}
    Token tIdent;
    boolean readonly = false;
    Type type;
}
{
    [ <READONLY>
        {
            readonly = true;
        }
    ] type = Type() tIdent=<IDENT>
        {
            if (readonly && !(type instanceof ArrayType || type instanceof RecordType))
                throw new YAPLException(CompilerError.ReadonlyNotReference, tIdent);

            ISymbol s = new Symbol(tIdent, ISymbol.Parameter);
            s.setType(type);
            s.setReadonly(readonly);
            s.setKind(ISymbol.Parameter);
            symbolTable.addSymbol(s);
            return s;
        }
}

void FormalParamList(ProcedureSymbol proc) throws YAPLException :
{
    {info("Found: FormalParamList");}
    ISymbol param;
    int paramIdx = 0;
}
{
    param = FormalParam()
    {        
        param.setOffset(codeGen.formalParamOffset(paramIdx));
        proc.addParameter(param);        
    }
    (
        <COMMA> param = FormalParam()
        {
            paramIdx++;
            param.setOffset(codeGen.formalParamOffset(paramIdx));
            proc.addParameter(param);
        }
    )*
}

void Procedure() throws YAPLException :
{
    {info("Found: Procedure");}
    Token tStartIdent;
    Token tEndIdent;
    Type retType;
    ProcedureSymbol s;
}
{
    <PROCEDURE> retType = ReturnType() tStartIdent=<IDENT>
        {
            s = new ProcedureSymbol(tStartIdent);
            s.setType(retType);
            symbolTable.addSymbol(s);
            symbolTable.openScope(false);
            symbolTable.setParentSymbol(s);
        }
    <OPEN_PARENTH> [ FormalParamList(s) ] <CLOSE_PARENTH> 
        {
            codeGen.enterProc(tStartIdent.image, s.getParametersCount());
        }
    Block() tEndIdent=<IDENT>
        {
            if (!tEndIdent.image.equals(tStartIdent.image)) throw new ProcedureNameMismatchException(tStartIdent, tEndIdent);
            symbolTable.closeScope();            
        }
    <SEMICOLON>

    {
        if (!(s.getType() instanceof VoidType) && !s.getReturnSeen())
            throw new YAPLException(CompilerError.MissingReturn, tEndIdent);

        codeGen.exitProc("exit_" + tStartIdent.image);
    }
}

void Program() throws YAPLException :
{
    {info("Found: Program");}
    Token tEndIdent;    
    ISymbol symProgram;
}
{
    <PROGRAM> tProgramName=<IDENT>
        {
            symbolTable.openScope(false);            
            symProgram = new Symbol(tProgramName, ISymbol.Program);
            symbolTable.setParentSymbol(symProgram);
            symProgram.setType(new VoidType());
            symbolTable.addSymbol(symProgram);      
        }
    (
        { symbolTable.openScope(true); }
        (Decl() | Procedure())
    )* <BEGIN> 
    {
            codeGen.enterMain();
    }
    StatementList() <END> tEndIdent=<IDENT>
        {
            if (!tEndIdent.image.equals(tProgramName.image)) throw new ProgramNameMismatchException(tProgramName, tEndIdent);
            symbolTable.closeScope();
            symbolTable.closeScope();
            codeGen.exitMain();
        }
    <DOT>
}