/* Generated By:JavaCC: Do not edit this line. Parser.java */
package yapl.parser;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import yapl.exceptions.IllegalUseException;
import yapl.exceptions.ProcedureNameMismatchException;
import yapl.exceptions.ProgramNameMismatchException;
import yapl.exceptions.YAPLException;
import yapl.impl.*;
import yapl.interfaces.CompilerError;
import yapl.interfaces.IAttrib;
import yapl.interfaces.ICodeGen;
import yapl.interfaces.ISymbol;
import yapl.lib.*;

public class Parser implements ParserConstants {
    private static SymbolTable symbolTable = new SymbolTable();
    private static Token tProgramName = null;
    private static boolean displayInfo = false;    // set to true for extra compiler information
    private static ICodeGen codeGen;

    public static void main(String args[]) {
        try {
            String file, outfile;
            if (args == null || args.length < 2) {
                file = "testFiles/typecheck/test06.yapl";
                outfile = "out.asm";
            } else {
                file = args[0];
                outfile = args[1];
            }
            System.out.println("args: " + file + " --  " + outfile);
            Parser parser = new Parser(new FileInputStream(file));
            codeGen = new CodeGen(new PrintStream(outfile));
            parser.Program();

            CompilerMessage.printOK(tProgramName.image);
        } catch (ParseException pe) {
            CompilerMessage.printError(pe, tProgramName.image);
        } catch (YAPLException ye) {
            CompilerMessage.printError(ye, tProgramName.image);
        } catch (IOException e) {
            System.err.println("something went wrong" + e);
        }
    }

    /** Output function for additional information */
    private static void info(String s) {
      if(displayInfo)
                System.out.println("> Compiler: " + s);
    }

    /** Output function for additional information */
    private static void info(String s, Token t) {
                info(s + " '"+t.image+"'");
    }

  static final public Token RelOp() throws ParseException, YAPLException {
    {info("Found: RelOp");}
    Token tOp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      tOp = jj_consume_token(LT);
      break;
    case LEQ:
      tOp = jj_consume_token(LEQ);
      break;
    case GEQ:
      tOp = jj_consume_token(GEQ);
      break;
    case GT:
      tOp = jj_consume_token(GT);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return tOp;}
    throw new Error("Missing return statement in function");
  }

  static final public Token EqualOp() throws ParseException, YAPLException {
    {info("Found: EqualOp");}
    Token tOp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      tOp = jj_consume_token(EQ);
      break;
    case NEQ:
      tOp = jj_consume_token(NEQ);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return tOp;}
    throw new Error("Missing return statement in function");
  }

  static final public Token AddOp() throws ParseException, YAPLException {
    {info("Found: AddOp");}
    Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      tok = jj_consume_token(PLUS);
      break;
    case MINUS:
      tok = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return tok;}
    throw new Error("Missing return statement in function");
  }

  static final public Token MulOp() throws ParseException, YAPLException {
    {info("Found: MulOp");}
    Token tOp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      tOp = jj_consume_token(MULT);
      break;
    case DIV:
      tOp = jj_consume_token(DIV);
      break;
    case MOD:
      tOp = jj_consume_token(MOD);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return tOp;}
    throw new Error("Missing return statement in function");
  }

/* Literal = "True" | "False" | number . */
  static final public IAttrib Literal() throws ParseException, YAPLException {
        {info("Found: Literal");}
        Token tok;
        IAttrib attrib;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      tok = jj_consume_token(TRUE);
                                                         info("Found: <TRUE>");
              attrib = new Attrib(Attrib.Constant, new BoolType(true));
      break;
    case FALSE:
      tok = jj_consume_token(FALSE);
                                                 info("Found: <FALSE>");
              attrib = new Attrib(Attrib.Constant, new BoolType(false));
      break;
    case NUMBER:
      tok = jj_consume_token(NUMBER);
                                 info("Found: <NUMBER>", tok);
              attrib = new Attrib(Attrib.Constant,new IntType(Integer.parseInt(tok.image)) );
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            attrib.setKind(IAttrib.Constant);
            attrib.setToken(tok);
            {if (true) return attrib;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib Selector(IAttrib parent) throws ParseException, YAPLException {
    {info("Found: Selector");}
    Token tIdent, selector;
    Type type = parent.getType();
    IAttrib attr;
    IAttrib idx;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQUARE_BRACKET_OPEN:
      selector = jj_consume_token(SQUARE_BRACKET_OPEN);
      idx = Expr();
      jj_consume_token(SQUARE_BRACKET_CLOSE);
            if (!(type instanceof ArrayType))
                {if (true) throw new YAPLException(CompilerError.SelectorNotArray, selector);}
            type = ((ArrayType)type).subarray(1);

            if (!(idx.getType() instanceof IntType))
                {if (true) throw new YAPLException(CompilerError.BadArraySelector, selector);}

            attr = new Attrib(type, parent.isConstant());
            attr.setToken(selector);
            attr.setKind(IAttrib.ArrayElement);
            //TODO: maybe a handling des vuam frei kummt brauchn
            codeGen.freeReg(idx);
      break;
    case DOT:
      jj_consume_token(DOT);
      tIdent = jj_consume_token(IDENT);
            if (!(type instanceof RecordType))
                {if (true) throw new YAPLException(CompilerError.SelectorNotRecord, tIdent);}

            ISymbol sym = ((RecordType)type).getMember(tIdent.image);
            if (sym == null)
                {if (true) throw new YAPLException(CompilerError.InvalidRecordField, tIdent);}
            type = sym.getType();
            attr = new Attrib(type, parent.isConstant());
            attr.setToken(tIdent);
            attr.setKind(IAttrib.Address);
            //TODO: des setKind pr??fen - wird so vmtl nit gehn

      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQUARE_BRACKET_OPEN:
    case DOT:
      attr = Selector(attr);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
        {if (true) return attr;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib ArrayLen() throws ParseException, YAPLException {
    {info("Found: ArrayLen");}
    Token tIdent;
    IAttrib arrayAttr;
    IAttrib resultAttr;
    jj_consume_token(HASH);
    tIdent = jj_consume_token(IDENT);
            ISymbol s = symbolTable.lookup(tIdent);

            if (s.getKind() != ISymbol.Variable && s.getKind() != ISymbol.Parameter)
                {if (true) throw new IllegalUseException(s, tIdent);}

            arrayAttr = new Attrib(s);
            arrayAttr.setToken(tIdent);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQUARE_BRACKET_OPEN:
    case DOT:
      arrayAttr = Selector(arrayAttr);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
        if (!(arrayAttr.getType() instanceof ArrayType))
            {if (true) throw new YAPLException(CompilerError.ArrayLenNotArray, tIdent);}

        resultAttr = new Attrib(new IntType(), true);
        resultAttr.setToken(tIdent);
        {if (true) return resultAttr;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib PrimaryExpr() throws ParseException, YAPLException {
    {info("Found: PrimaryExpr");}
    Token tIdent;
    IAttrib resultAttr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NUMBER:
      resultAttr = Literal();
      break;
    case OPEN_PARENTH:
      jj_consume_token(OPEN_PARENTH);
      resultAttr = Expr();
      jj_consume_token(CLOSE_PARENTH);
      break;
    default:
      jj_la1[9] = jj_gen;
      if (jj_2_1(2)) {
        resultAttr = ProcedureCall();
                if (resultAttr.getType() instanceof VoidType)
                    {if (true) throw new YAPLException(CompilerError.ProcNotFuncExpr, resultAttr.getToken());}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          tIdent = jj_consume_token(IDENT);
                ISymbol s = symbolTable.lookup(tIdent);
                if (s.getKind() != ISymbol.Variable && s.getKind() != ISymbol.Constant && s.getKind() != ISymbol.Parameter)
                    {if (true) throw new IllegalUseException(s, tIdent);}
                resultAttr = new Attrib(s);
                if(s.getKind() == ISymbol.Constant)
                    resultAttr.setKind(IAttrib.Constant);
                else if (s.getKind() == ISymbol.Variable)
                    resultAttr.setKind(IAttrib.Address);
                resultAttr.setToken(tIdent);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SQUARE_BRACKET_OPEN:
          case DOT:
            resultAttr = Selector(new Attrib(s));
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          break;
        case HASH:
          resultAttr = ArrayLen();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
        codeGen.loadReg(resultAttr);
        {if (true) return resultAttr;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib UnaryExpr() throws ParseException, YAPLException {
    {info("Found: UnaryExpr");}
    IAttrib resultAttr;
    Token tAddOp = null;
    boolean opSeen = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      tAddOp = AddOp();
                       opSeen = true;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    resultAttr = PrimaryExpr();
        if (opSeen) {
            if(!(resultAttr.getType() instanceof IntType))
                {if (true) throw new YAPLException(CompilerError.IllegalOp1Type, resultAttr.getToken());}
            else if (tAddOp.image.equals("-"))
                codeGen.neg(resultAttr);
        }

        {if (true) return resultAttr;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib MulExpr() throws ParseException, YAPLException {
    {info("Found: MulExpr");}
    IAttrib lvalue, rvalue;
    Token tOp;
    lvalue = UnaryExpr();
        codeGen.loadReg(lvalue);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_1;
      }
      tOp = MulOp();
      rvalue = UnaryExpr();
            if (!(lvalue.getType() instanceof IntType))
                {if (true) throw new YAPLException(CompilerError.IllegalOp2Type, lvalue.getToken());}
            if (!(rvalue.getType() instanceof IntType))
                {if (true) throw new YAPLException(CompilerError.IllegalOp2Type, rvalue.getToken());}

            codeGen.loadReg(rvalue);
            codeGen.op2(lvalue, tOp, rvalue);
    }
        {if (true) return lvalue;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib AddExpr() throws ParseException, YAPLException {
    {info("Found: AddExpr");}
    IAttrib lvalue, rvalue;
    Token tOp;
    lvalue = MulExpr();
        codeGen.loadReg(lvalue);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_2;
      }
      tOp = AddOp();
      rvalue = MulExpr();
            if (!(lvalue.getType() instanceof IntType))
                {if (true) throw new YAPLException(CompilerError.IllegalOp2Type, lvalue.getToken());}
            if (!(rvalue.getType() instanceof IntType))
                {if (true) throw new YAPLException(CompilerError.IllegalOp2Type, rvalue.getToken());}

            codeGen.loadReg(rvalue);
            codeGen.op2(lvalue, tOp, rvalue);
    }
        {if (true) return lvalue;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib RelExpr() throws ParseException, YAPLException {
    {info("Found: RelExpr");}
    IAttrib lvalue, rvalue = null;
    Token tOp;
    lvalue = AddExpr();
        codeGen.loadReg(lvalue);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case LEQ:
    case GT:
    case GEQ:
      tOp = RelOp();
      rvalue = AddExpr();
            if (!(lvalue.getType() instanceof IntType)) { info("lvalue: " + lvalue.getType());
                {if (true) throw new YAPLException(CompilerError.IllegalRelOpType, lvalue.getToken());} }
            if (!(rvalue.getType() instanceof IntType)) { info("rvalue: " + rvalue.getType());
                {if (true) throw new YAPLException(CompilerError.IllegalRelOpType, rvalue.getToken());} }

            codeGen.loadReg(rvalue);
            codeGen.relOp(lvalue, tOp, rvalue);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
        {if (true) return lvalue;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib EqualExpr() throws ParseException, YAPLException {
    {info("Found: EqualExpr");}
    IAttrib lvalue, rvalue = null;
    Token tOp;
    lvalue = RelExpr();
        codeGen.loadReg(lvalue);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NEQ:
      tOp = EqualOp();
      rvalue = RelExpr();
            if (!lvalue.getType().isCompatible(rvalue.getType()))
                {if (true) throw new YAPLException(CompilerError.IllegalEqualOpType, lvalue.getToken());}
            if (!((lvalue.getType() instanceof IntType && rvalue.getType() instanceof IntType) || (lvalue.getType() instanceof BoolType && rvalue.getType() instanceof BoolType)))
                {if (true) throw new YAPLException(CompilerError.IllegalEqualOpType, lvalue.getToken());}

            codeGen.loadReg(rvalue);
            codeGen.relOp(lvalue, tOp, rvalue);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
        {if (true) return lvalue;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib CondAndExpr() throws ParseException, YAPLException {
    {info("Found: CondAndExpr");}
    IAttrib lvalue, rvalue;
    Token tOp;
    lvalue = EqualExpr();
        codeGen.loadReg(lvalue);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_3;
      }
      tOp = jj_consume_token(AND);
      rvalue = EqualExpr();
            if (!(lvalue.getType() instanceof BoolType))
                {if (true) throw new YAPLException(CompilerError.IllegalOp2Type, lvalue.getToken());}
            if (!(rvalue.getType() instanceof BoolType))
                {if (true) throw new YAPLException(CompilerError.IllegalOp2Type, rvalue.getToken());}

            codeGen.loadReg(rvalue);
            codeGen.op2(lvalue, tOp, rvalue);
    }
        {if (true) return lvalue;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib CreationExpr() throws ParseException, YAPLException {
    {info("Found: CreationExpr");}
    Type type;
    ArrayType resultType;
    IAttrib dim;
    Token newTok;
    newTok = jj_consume_token(NEW);
    type = StaticType();
        resultType = new ArrayType(type);
        resultType.setDim(1);
    jj_consume_token(SQUARE_BRACKET_OPEN);
    dim = Expr();
    jj_consume_token(SQUARE_BRACKET_CLOSE);
        if (!(dim.getType() instanceof IntType))
            {if (true) throw new YAPLException(CompilerError.BadArraySelector, dim.getToken());}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQUARE_BRACKET_OPEN:
      jj_consume_token(SQUARE_BRACKET_OPEN);
      dim = Expr();
      jj_consume_token(SQUARE_BRACKET_CLOSE);
            resultType = new ArrayType(resultType);

            if (!(dim.getType() instanceof IntType))
                {if (true) throw new YAPLException(CompilerError.BadArraySelector, dim.getToken());}
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
        IAttrib resultAttr = new Attrib(resultType, false);
        resultAttr.setToken(newTok);
        {if (true) return resultAttr;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib Expr() throws ParseException, YAPLException {
    {info("Found: Expr");}
    IAttrib lvalue, rvalue;
    Token tOp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case PLUS:
    case MINUS:
    case HASH:
    case OPEN_PARENTH:
    case IDENT:
    case NUMBER:
      lvalue = CondAndExpr();
            codeGen.loadReg(lvalue);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_4;
        }
        tOp = jj_consume_token(OR);
        rvalue = CondAndExpr();
                if (!(lvalue.getType() instanceof BoolType)) { info("lvalue not bool in Expr(), is " + lvalue.getType());
                    {if (true) throw new YAPLException(CompilerError.IllegalOp2Type, lvalue.getToken());} }
                if (!(rvalue.getType() instanceof BoolType)) { info("rvalue not bool in Expr(), is " + lvalue.getType());
                    {if (true) throw new YAPLException(CompilerError.IllegalOp2Type, rvalue.getToken());} }

                codeGen.loadReg(rvalue);
                codeGen.op2(lvalue, tOp, rvalue);
      }
      break;
    case NEW:
      lvalue = CreationExpr();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return lvalue;}
    throw new Error("Missing return statement in function");
  }

  static final public List<IAttrib> ArgumentList(ProcedureSymbol s) throws ParseException, YAPLException {
    {info("Found: ArgumentList");}
    int i = 0;
    List<IAttrib> arguments = new ArrayList<IAttrib>();
    int paramCount = s.getParametersCount();
    IAttrib arg, firstArg;
    ISymbol param;
    firstArg = Expr();
        arg = firstArg;
        if (i > paramCount - 1)
            {if (true) throw new YAPLException(CompilerError.ArgNotApplicable, arg.getToken());}
        param = s.getParameter(i);
        if (!arg.getType().isCompatible(param.getType()))
            {if (true) throw new YAPLException(CompilerError.ArgNotApplicable, arg.getToken());}
        if (arg.isConstant() && !(param.getType() instanceof IntType) && !(param.getType() instanceof BoolType) && !param.isReadonly())
            {if (true) throw new YAPLException(CompilerError.ReadonlyArg, arg.getToken());}
        i++;
        arguments.add(arg);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      arg = Expr();
            if (i > paramCount - 1)
                {if (true) throw new YAPLException(CompilerError.ArgNotApplicable, arg.getToken());}
            param = s.getParameter(i);
            if (!arg.getType().isCompatible(param.getType()))
                {if (true) throw new YAPLException(CompilerError.ArgNotApplicable, arg.getToken());}
            if (arg.isConstant() && !(param.getType() instanceof IntType) && !(param.getType() instanceof BoolType) && !param.isReadonly())
                {if (true) throw new YAPLException(CompilerError.ReadonlyArg, arg.getToken());}
            i++;
            arguments.add(arg);
    }
        if (i < paramCount)
            {if (true) throw new YAPLException(CompilerError.TooFewArgs, firstArg.getToken());}

        {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

  static final public IAttrib ProcedureCall() throws ParseException, YAPLException {
    {info("Found: ProcedureCall");}
    Token tIdent;
    IAttrib resultAttr;
    List<IAttrib> arguments = null;
    tIdent = jj_consume_token(IDENT);
            ISymbol s = symbolTable.lookup(tIdent);
            if (!(s instanceof ProcedureSymbol))
                {if (true) throw new IllegalUseException(s, tIdent);}
            resultAttr = new Attrib(s);
            resultAttr.setToken(tIdent);
    jj_consume_token(OPEN_PARENTH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case TRUE:
    case FALSE:
    case PLUS:
    case MINUS:
    case HASH:
    case OPEN_PARENTH:
    case IDENT:
    case NUMBER:
      arguments = ArgumentList((ProcedureSymbol)s);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PARENTH);
        if (arguments == null && ((ProcedureSymbol)s).getParametersCount() > 0)
            {if (true) throw new YAPLException(CompilerError.TooFewArgs, tIdent);}

        if(arguments != null)
            for(IAttrib a : arguments)
                codeGen.loadReg(a); //unnecessary

        codeGen.callProc(tIdent.image, arguments);

        {if (true) return resultAttr;}
    throw new Error("Missing return statement in function");
  }

  static final public void Assignment() throws ParseException, YAPLException {
    {info("Found: Assignment");}
    Token tIdent;
    IAttrib lvalue, rvalue;
    tIdent = jj_consume_token(IDENT);
            ISymbol s = symbolTable.lookup(tIdent);
            if (s.getKind() != ISymbol.Variable && s.getKind() != ISymbol.Parameter)
                {if (true) throw new IllegalUseException(s, tIdent);}
            lvalue = new Attrib(s);
            lvalue.setKind(IAttrib.Address);
            lvalue.setToken(tIdent);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQUARE_BRACKET_OPEN:
    case DOT:
      lvalue = Selector(lvalue);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(ASSIGN);
    rvalue = Expr();
        if (lvalue.isConstant())
            {if (true) throw new YAPLException(CompilerError.ReadonlyAssign, tIdent);}
        if (!lvalue.getType().isCompatible(rvalue.getType())) { info("lvalue: " + lvalue.getType() + " rvalue: " + rvalue.getType());
            {if (true) throw new YAPLException(CompilerError.TypeMismatchAssign, tIdent);} }

        if (rvalue.isConstant() && (rvalue.getType() instanceof ArrayType || rvalue.getType() instanceof RecordType))
            lvalue.setConstant(true);

        codeGen.assign(lvalue, rvalue);
  }

  static final public void IfStatement() throws ParseException, YAPLException {
    {info("Found: IfStatement");}
    IAttrib attr;
    jj_consume_token(IF);
    attr = Expr();
        if (!(attr.getType() instanceof BoolType))
            {if (true) throw new YAPLException(CompilerError.CondNotBool, attr.getToken());}

        //TODO - replace freeReg by codeGen function
        codeGen.freeReg(attr);
    jj_consume_token(THEN);
    StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      StatementList();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
  }

  static final public void WhileStatement() throws ParseException, YAPLException {
    {info("Found: WhileStatement");}
    IAttrib attr;
    jj_consume_token(WHILE);
    attr = Expr();
        if (!(attr.getType() instanceof BoolType))
            {if (true) throw new YAPLException(CompilerError.CondNotBool, attr.getToken());}

        //TODO - replace freeReg by codeGen function
        codeGen.freeReg(attr);
    jj_consume_token(DO);
    StatementList();
    jj_consume_token(ENDWHILE);
  }

  static final public void ReturnStatement() throws ParseException, YAPLException {
    {info("Found: ReturnStatement");}
    IAttrib retAttr = new Attrib(new VoidType(), true);
    Token returnTok;
    returnTok = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case TRUE:
    case FALSE:
    case PLUS:
    case MINUS:
    case HASH:
    case OPEN_PARENTH:
    case IDENT:
    case NUMBER:
      retAttr = Expr();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
        retAttr.setToken(returnTok);
        ISymbol s = symbolTable.getNearestParentSymbol(ISymbol.Procedure);
        if (s == null)
            s = symbolTable.getNearestParentSymbol(ISymbol.Program);
        s.setReturnSeen(true);
        if (s.getType() instanceof VoidType && !(retAttr.getType() instanceof VoidType)) {
            if (s.getKind() == ISymbol.Procedure)
                {if (true) throw new YAPLException(CompilerError.IllegalRetValProc, retAttr.getToken());}
            else
                {if (true) throw new YAPLException(CompilerError.IllegalRetValMain, retAttr.getToken());}
        }
        if(!s.getType().isCompatible(retAttr.getType()))
            {if (true) throw new YAPLException(CompilerError.InvalidReturnType, retAttr.getToken());}

        if(s.getKind() == ISymbol.Procedure) {
            codeGen.exitProc(s.getName(), retAttr);
        }
  }

  static final public void WriteStatement() throws ParseException, YAPLException {
    {info("Found: WriteStatement");}
    Token tStr;
    jj_consume_token(WRITE);
    tStr = jj_consume_token(STRING);
        codeGen.writeString(tStr.image.replace("\u005c"", ""));
  }

  static final public void Statement() throws ParseException, YAPLException {
    {info("Found: Statement");}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      IfStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case RETURN:
      ReturnStatement();
      break;
    case WRITE:
      WriteStatement();
      break;
    default:
      jj_la1[25] = jj_gen;
      if (jj_2_2(3)) {
        Assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          ProcedureCall();
          break;
        case BEGIN:
        case DECLARE:
          Block();
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void StatementList() throws ParseException, YAPLException {
    {info("Found: StatementList");}
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case WRITE:
      case BEGIN:
      case RETURN:
      case DECLARE:
      case IDENT:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_6;
      }
      Statement();
      jj_consume_token(SEMICOLON);
    }
  }

  static final public void Block() throws ParseException, YAPLException {
    {info("Found: Block");}
      symbolTable.openScope(false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARE:
      Decl();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
    StatementList();
    jj_consume_token(END);
      symbolTable.closeScope();
  }

  static final public Type StaticType() throws ParseException, YAPLException {
    {info("Found: StaticType");}
    Token tIdent;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
            info("Found: <INT>");
            {if (true) return new IntType();}
      break;
    case BOOL:
      jj_consume_token(BOOL);
            info("Found: <BOOL>");
            {if (true) return new BoolType();}
      break;
    case IDENT:
      tIdent = jj_consume_token(IDENT);
            ISymbol s = symbolTable.lookup(tIdent);
            if (s.getKind() != ISymbol.Typename)
                {if (true) throw new IllegalUseException(s, tIdent);}
            info("Found: Typename " + s);
            {if (true) return s.getType();}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException, YAPLException {
    info("Found: Type");
    Type t;
    t = StaticType();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQUARE_BRACKET_OPEN:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_7;
      }
      jj_consume_token(SQUARE_BRACKET_OPEN);
      jj_consume_token(SQUARE_BRACKET_CLOSE);
          t = new ArrayType(t);
    }
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Type ReturnType() throws ParseException, YAPLException {
    {info("Found: ReturnType");}
    Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
                 t = new VoidType();
      break;
    case INT:
    case BOOL:
    case IDENT:
      t = Type();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void ConstDecl() throws ParseException, YAPLException {
    {info("Found: ConstDecl");}
    Token tIdent;
    IAttrib rValue, lValue;
    jj_consume_token(CONST);
    tIdent = jj_consume_token(IDENT);
            ISymbol s = new Symbol(tIdent, ISymbol.Constant);
            symbolTable.addSymbol(s);
    jj_consume_token(CONST_ASSIGN);
    rValue = Literal();
    jj_consume_token(SEMICOLON);
        rValue.setKind(IAttrib.Constant);
        s.setType(rValue.getType());
        codeGen.allocVariable(s);

        lValue = new Attrib(s);
        lValue.setKind(IAttrib.Address);
        codeGen.assign(lValue, rValue);
  }

  static final public void VarDecl(ISymbol recordSymbol) throws ParseException, YAPLException {
    {info("Found: VarDecl");}
    Token tIdent;
    Type type;
    type = Type();
    tIdent = jj_consume_token(IDENT);
            ISymbol s = new Symbol(tIdent, ISymbol.Variable);
            s.setType(type);
            symbolTable.addSymbol(s);
            if (recordSymbol != null)
                ((RecordType)recordSymbol.getType()).addMember(s);

            codeGen.allocVariable(s);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      tIdent = jj_consume_token(IDENT);
            s = new Symbol(tIdent, ISymbol.Variable);
            s.setType(type);
            symbolTable.addSymbol(s);
            if (recordSymbol != null)
                ((RecordType)recordSymbol.getType()).addMember(s);

            codeGen.allocVariable(s);
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void TypeDecl() throws ParseException, YAPLException {
    {info("Found: TypeDecl");}
    Token tIdent;
    jj_consume_token(RECORD);
    tIdent = jj_consume_token(IDENT);
            ISymbol s = new Symbol(tIdent, ISymbol.Typename);
            RecordType rt = new RecordType();
            s.setType(rt);
            symbolTable.addSymbol(s);
            symbolTable.openScope(false);
    label_9:
    while (true) {
      VarDecl(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOL:
      case IDENT:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_9;
      }
    }
            symbolTable.closeScope();
    jj_consume_token(ENDRECORD);
    jj_consume_token(SEMICOLON);
  }

  static final public void Decl() throws ParseException, YAPLException {
    {info("Found: Decl");}
    jj_consume_token(DECLARE);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOL:
      case CONST:
      case RECORD:
      case IDENT:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        ConstDecl();
        break;
      case INT:
      case BOOL:
      case IDENT:
        VarDecl(null);
        break;
      case RECORD:
        TypeDecl();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public ISymbol FormalParam() throws ParseException, YAPLException {
    {info("Found: FormalParam");}
    Token tIdent;
    boolean readonly = false;
    Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READONLY:
      jj_consume_token(READONLY);
            readonly = true;
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    type = Type();
    tIdent = jj_consume_token(IDENT);
            if (readonly && !(type instanceof ArrayType || type instanceof RecordType))
                {if (true) throw new YAPLException(CompilerError.ReadonlyNotReference, tIdent);}

            ISymbol s = new Symbol(tIdent, ISymbol.Parameter);
            s.setType(type);
            s.setReadonly(readonly);
            symbolTable.addSymbol(s);
            {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public void FormalParamList(ProcedureSymbol proc) throws ParseException, YAPLException {
    {info("Found: FormalParamList");}
    ISymbol param;
    param = FormalParam();
        proc.addParameter(param);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      param = FormalParam();
            proc.addParameter(param);
    }
  }

  static final public void Procedure() throws ParseException, YAPLException {
    {info("Found: Procedure");}
    Token tStartIdent;
    Token tEndIdent;
    Type retType;
    ProcedureSymbol s;
    jj_consume_token(PROCEDURE);
    retType = ReturnType();
    tStartIdent = jj_consume_token(IDENT);
            s = new ProcedureSymbol(tStartIdent);
            s.setType(retType);
            symbolTable.addSymbol(s);
            symbolTable.openScope(false);
            symbolTable.setParentSymbol(s);
    jj_consume_token(OPEN_PARENTH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOL:
    case READONLY:
    case IDENT:
      FormalParamList(s);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PARENTH);
    Block();
    tEndIdent = jj_consume_token(IDENT);
            if (!tEndIdent.image.equals(tStartIdent.image)) {if (true) throw new ProcedureNameMismatchException(tStartIdent, tEndIdent);}
            symbolTable.closeScope();
    jj_consume_token(SEMICOLON);
        if (!(s.getType() instanceof VoidType) && !s.getReturnSeen())
            {if (true) throw new YAPLException(CompilerError.MissingReturn, tEndIdent);}
  }

  static final public void Program() throws ParseException, YAPLException {
    {info("Found: Program");}
    Token tEndIdent;
    ISymbol symProgram;
    jj_consume_token(PROGRAM);
    tProgramName = jj_consume_token(IDENT);
            codeGen.enterMain();
            symbolTable.openScope(false);
            symProgram = new Symbol(tProgramName, ISymbol.Program);
            symbolTable.setParentSymbol(symProgram);
            symProgram.setType(new VoidType());
            symbolTable.addSymbol(symProgram);
            symbolTable.openScope(true);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
        Decl();
        break;
      case PROCEDURE:
        Procedure();
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(BEGIN);
    StatementList();
    jj_consume_token(END);
    tEndIdent = jj_consume_token(IDENT);
            if (!tEndIdent.image.equals(tProgramName.image)) {if (true) throw new ProgramNameMismatchException(tProgramName, tEndIdent);}
            symbolTable.closeScope();
            symbolTable.closeScope();
            codeGen.exitMain();
    jj_consume_token(DOT);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_19() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(HASH)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(OPEN_PARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(SQUARE_BRACKET_OPEN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(OPEN_PARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x22000,0x0,0x0,0x0,0x0,0x22000,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x80,0x22800,0x0,0x22800,0x0,0x4000,0x22800,0x10c0020,0x2200000,0x32c0020,0x2000000,0x8400,0x0,0x9400,0x0,0x8400,0xc08400,0xc08400,0x10000000,0x0,0x10008400,0x22000000,0x22000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1e,0x60,0x180,0xe00,0x8000000,0x5000,0x5000,0x5000,0x5000,0x8010000,0x4008000,0x180,0xe00,0x180,0x1e,0x60,0x0,0x1000,0x0,0xc018180,0x40000,0xc018180,0x5000,0x0,0xc018180,0x0,0x4000000,0x4000000,0x0,0x4000000,0x1000,0x4000000,0x40000,0x4000000,0x4000000,0x4000000,0x0,0x40000,0x4000000,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
