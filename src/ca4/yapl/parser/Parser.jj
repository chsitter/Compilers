PARSER_BEGIN(Parser)

package ca4.yapl.parser;

import ca4.yapl.exceptions.IllegalUseException;
import ca4.yapl.exceptions.ProcedureNameMismatchException;
import ca4.yapl.exceptions.ProgramNameMismatchException;
import ca4.yapl.exceptions.YAPLException;
import ca4.yapl.impl.Symbol;
import ca4.yapl.impl.SymbolTable;
import ca4.yapl.interfaces.ISymbol;
import ca4.yapl.lib.CompilerMessage;
import java.io.FileInputStream;
import java.io.IOException;

public class Parser {
    private static SymbolTable symbolTable = new SymbolTable();
    private static Token tProgramName = null;

    public static void main(String args[]) {
        try {
            String file;
            if (args == null || args.length < 1) {
                file = "testFiles/test14.yapl";
            } else {
                file = args[0];
            }
            
            Parser parser = new Parser(new FileInputStream(file));
            parser.Program();

            CompilerMessage.printOK(tProgramName.image);
        } catch (ParseException pe) {
            CompilerMessage.printError(pe, tProgramName.image);
        } catch (YAPLException ye) {
            CompilerMessage.printError(ye, tProgramName.image);
        } catch (IOException e) {
            System.err.println("something went wrong" + e);
        }
    }
    
    /** Output function for additional information */
    private static void info(String s) {
      if(displayInfo)
		System.out.println("> Compiler: " + s);
    }
    
    /** Output function for additional information */
    private static void info(String s, Token t) {
		info(s + " '"+t.image+"'");
    }
}

PARSER_END(Parser)

SKIP :
{
 " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < IF: "If" >
|
  < DO: "Do" >
|
  < OR: "Or" >
|
  < AND: "And" >
|
  < END: "End" >
|
  < INT: "int" >
|
  < NEW: "new" >
|
  < VOID: "void" >
|
  < TRUE: "True" >
|
  < ELSE: "Else" >
|
  < BOOL: "bool" >
|
  < THEN: "Then" >
|
  < FALSE: "False" >
|
  < WHILE: "While" >
|
  < WRITE: "Write" >
|
  < ENDIF: "EndIf" >
|
  < BEGIN: "Begin" >
|
  < CONST: "Const" >
|
  < RECORD: "Record" >
|
  < RETURN: "Return" >
|
  < DECLARE: "Declare" >
|
  < PROGRAM: "Program" >
|
  < ENDWHILE: "EndWhile" >
|
  < READONLY: "readonly" >
|
  < PROCEDURE: "Procedure" >
|
  < ENDRECORD: "EndRecord" >
|
  < #LETTER: ["a"-"z","A"-"Z","_"] >
|
  < #DIGIT: ["0"-"9"] >
|
  < LT: "<" >
|
  < LEQ: "<=" >
|
  < GT: ">" >
|
  < GEQ: ">=" >
|
  < EQ: "==" >
|
  < NEQ: "!=" >
|
  < PLUS: "+" >
|
  < MINUS: "-" >
|
  < MULT: "*" >
|
  < DIV: "/" >
|
  < MOD: "%" >
|
  < SQUARE_BRACKET_OPEN: "[" >
|
  < SQUARE_BRACKET_CLOSE: "]" >
|
  < DOT: "." >
|
  < HASH: "#" >
|
  < OPEN_PARENTH: "(" >
|
  < CLOSE_PARENTH: ")" >
|
  < COMMA: "," >
|
  < ASSIGN: ":=" >
|
  < SEMICOLON: ";" >
|
  < CONST_ASSIGN: "=" >
|
  < COMMENT_OPEN: "/*" >
|
  < COMMENT_CLOSE: "*/" >
|
  < QUOTE: "\"" >
|
  < #OTHERCHAR: "+" | "-" | "*" | "/" | "." | "," | ";" | ":" | "!" | "?" | "=" | "#" | "%" | "<" | ">" | "$" | "(" | ")" | "[" | "]" | "{" | "}" | "\\" | "@" | "&" | "^" | "|" >
|
  < IDENT: <LETTER> ( <LETTER> | <DIGIT> )* >
|
  < NUMBER: <DIGIT> ( <DIGIT> )* >
|
  < STRING: <QUOTE> ( " " | <LETTER> | <DIGIT> | <OTHERCHAR> )* <QUOTE> >
}

SPECIAL_TOKEN:
{
  < COMMENT: <COMMENT_OPEN> (~["*"] | (["*"]~["/"]))* <COMMENT_CLOSE> >
}

void RelOp() throws YAPLException :
{}
{
    <LT> | <LEQ> | <GEQ> | <GT>
}

void EqualOp() throws YAPLException :
{}
{
    <EQ> | <NEQ>
}

void AddOp() throws YAPLException :
{}
{
    <PLUS> | <MINUS>
}

void MulOp() throws YAPLException :
{}
{
    <MULT> | <DIV> | <MOD>
}

/* Literal = "True" | "False" | number . */
Attrib Literal() throws YAPLException :
{
	{info("Found: Literal");}
	Token tok;
}
{

	<TRUE>				{info("Found: <TRUE>");}
	{ return new Attrib(Attrib.Constant, new BoolType(true)); }
	
	| <FALSE>			{info("Found: <FALSE>");}
	{ return new Attrib(Attrib.Constant, new BoolType(false)); }
		
	| tok = <NUMBER>	{info("Found: <NUMBER>", tok);}
	{ return new Attrib(Attrib.Constant,new IntType(Integer.parseInt(tok.image)) ); }

}

IAttrib Selector(IAttrib parent) throws YAPLException :
{
    Token tIdent;
    Type type = parent.getType();
    IAttrib attr;
    IAttrib idx;
}
{
    ( <SQUARE_BRACKET_OPEN> idx = Expr() <SQUARE_BRACKET_CLOSE>
        {
            if (!(type instanceof ArrayType))
                throw new YAPLException(CompilerError.SelectorNotArray);
            type = ((ArrayType)type).subarray(1);

            if (!(idx.getType() instanceof IntType))
                throw new YAPLException(CompilerError.BadArraySelector);

            attr = new Attrib(type, parent.isConstant());
        }
    | <DOT> tIdent=<IDENT>
        {
            if (!(type instanceof RecordType))
                throw new YAPLException(CompilerError.SymbolIllegalUse);
            
            ISymbol sym = ((RecordType)type).getMember(tIdent.image);
            if (sym == null)
                throw new YAPLException(CompilerError.IdentNotDecl);            
            type = sym.getType();
            attr = new Attrib(type, parent.isConstant());
        }
    ) [ attr=Selector(attr) ]
    {
        return attr;
    }
}

IAttrib ArrayLen() throws YAPLException :
{
    Token tIdent;
    IAttrib arrayAttr;
    IAttrib resultAttr;
}
{
    <HASH> tIdent=<IDENT>
        {
            ISymbol s = symbolTable.lookup(tIdent);

            if (s.getKind() != ISymbol.Variable && s.getKind() != ISymbol.Parameter)
                throw new IllegalUseException(s, tIdent);
            
            arrayAttr = new Attrib(s);
        }
    [ arrayAttr = Selector() ]
    {
        if (!(arrayAttr.getType() instanceof ArrayType))
            throw new YAPLException(CompilerError.ArrayLenNotArray);

        resultAttr = new Attrib(new IntType(), true);
        return resultAttr;
    }
}

IAttrib PrimaryExpr() throws YAPLException :
{
    Token tIdent;
    IAttrib resultAttr;
}
{
    (
        resultAttr = Literal() | <OPEN_PARENTH> resultAttr = Expr() <CLOSE_PARENTH> | LOOKAHEAD(2) resultAttr = ProcedureCall() | tIdent=<IDENT> 
            {
                ISymbol s = symbolTable.lookup(tIdent);
                if (s.getKind() != ISymbol.Variable && s.getKind() != ISymbol.Constant && s.getKind() != ISymbol.Parameter)
                    throw new IllegalUseException(s, tIdent);
                resultAttr = new Attrib(s);
            }
        [ resultAttr = Selector(new Attrib(s)) ] | resultAttr = ArrayLen()
    )
    {
        return resultAttr;
    }
}

IAttrib UnaryExpr() throws YAPLException :
{
    IAttrib resultAttr;
}
{
    [ AddOp() ] resultAttr = PrimaryExpr()
    {
        if (!(resultAttr.getType() instanceof IntType))
            throw new YAPLException(CompilerError.IllegalOp1Type);

        return resultAttr;
    }
}

IAttrib MulExpr() throws YAPLException :
{
    IAttrib lvalue, rvalue;
}
{
    lvalue = UnaryExpr()
    {
        if (!(lvalue.getType() instanceof IntType))
            throw new YAPLException(CompilerError.IllegalOp2Type);
    }
    (
        MulOp() rvalue = UnaryExpr()
        {
            if (!(rvalue.getType() instanceof IntType))
                throw new YAPLException(CompilerError.IllegalOp2Type);
        }
    )*
    {
        return lvalue;
    }
}

IAttrib AddExpr() throws YAPLException :
{
    IAttrib lvalue, rvalue;
}
{
    lvalue = MulExpr()
    {
        if (!(lvalue.getType() instanceof IntType))
            throw new YAPLException(CompilerError.IllegalOp2Type);
    }
    (
        AddOp() rvalue = MulExpr()
        {
            if (!(rvalue.getType() instanceof IntType))
                throw new YAPLException(CompilerError.IllegalOp2Type);
        }
    )*
    {
        return lvalue;
    }
}

IAttrib RelExpr() throws YAPLException :
{
    IAttrib lvalue, rvalue;
}
{
    lvalue = AddExpr() [ RelOp() rvalue = AddExpr() ]
    {
        if (!(lvalue instanceof IntType && rvalue instanceof IntType))
            throw new YAPLException(CompilerError.IllegalOp2Type);
        
        return new Attrib(new BoolType(), true);
    }
}

IAttrib EqualExpr() throws YAPLException :
{
    IAttrib lvalue, rvalue;
}
{
    lvalue = RelExpr() [ EqualOp() rvalue = RelExpr() ]
    {
        if (!lvalue.isCompatible(rvalue))
            throw new YAPLException(CompilerError.IllegalEqualOpType);
        if (!(lvalue instanceof IntType || rvalue instanceof IntType || lvalue instanceof BoolType || rvalue instanceof BoolType))
            throw new YAPLException(CompilerError.IllegalEqualOpType);
        return new Attrib(new BoolType(), true);
    }
}

IAttrib CondAndExpr() throws YAPLException :
{
    IAttrib lvalue, rvalue;
}
{
    lvalue = EqualExpr()
    {
        if (!(lvalue instanceof BoolType))
            throw new YAPLException(CompilerError.IllegalOp2Type);
    }
    (
        <AND> rvalue = EqualExpr()
        {
            if (!(rvalue instanceof BoolType))
                throw new YAPLException(CompilerError.IllegalOp2Type);
        }
    )*
    {
        return lvalue;
    }
}

IAttrib CreationExpr() throws YAPLException :
{
    Type type;
    ArrayType resultType;
    IAttrib dim;
}
{
    <NEW> type = StaticType()
    {
        resultType = new ArrayType(type);
        resultType.setDim(1);
    }
    <SQUARE_BRACKET_OPEN> dim = Expr() <SQUARE_BRACKET_CLOSE>
    {
        if (!(dim instanceof IntType))
            throw new YAPLException(CompilerError.BadArraySelector);
    }
    [
        <SQUARE_BRACKET_OPEN> dim = Expr() <SQUARE_BRACKET_CLOSE>
        {
            resultType.setDim(2);

            if (!(dim instanceof IntType))
                throw new YAPLException(CompilerError.BadArraySelector);
        }
    ]
    {
        return new Attrib(resultType, false);
    }
}

IAttrib Expr() throws YAPLException :
{
    IAttrib lvalue, rvalue;
}
{
    (
        lvalue = CondAndExpr()
        {
            if (!(lvalue instanceof BoolType))
                throw new YAPLException(CompilerError.IllegalOp2Type);
        }
        (
            <OR> rvalue = CondAndExpr()
            {
                if (!(rvalue instanceof BoolType))
                    throw new YAPLException(CompilerError.IllegalOp2Type);
            }
        )* | lvalue = CreationExpr()
    )
    {
        return lvalue;
    }
}

int ArgumentList(ProcedureSymbol s) throws YAPLException :
{
    int i = 0;
    int paramCount = s.getParamtersCount();
    IAttrib arg;
    ISymbol param;
}
{
    arg = Expr()
    {
        param = s.getParameter(i);
        if (i >= paramCount - 1 || !arg.getType().isCompatible(param))
            throw new YAPLException(CompilerError.ArgNotApplicable);
        if (arg.isConstant() && !(param.getType() instanceof IntType) && !(param.getType() instanceof BoolType) && !param.isReadonly())
            throw new YAPLException(CompilerError.ReadonlyArg);
        i++;
    }
    (
        <COMMA> arg = Expr()
        {
            param = s.getParameter(i);
            if (i >= paramCount - 1 || !arg.getType().isCompatible(param))
                throw new YAPLException(CompilerError.ArgNotApplicable);
            i++;
        }
    )*

    if (i < paramCount)
        throw new YAPLException(CompilerError.TooFewArgs);

    return i;
}

IAttrib ProcedureCall() throws YAPLException :
{
    Token tIdent;
    IAttrib resultAttr;
    int argCount = -1;
}
{
    tIdent=<IDENT> 
        {
            ISymbol s = symbolTable.lookup(tIdent);
            if (!(s.getKind() instanceof ProcedureSymbol))
                throw new IllegalUseException(s, tIdent);
            resultAttr = new Attrib(s);
        }
    <OPEN_PARENTH> [ argCount = ArgumentList((ProcedureSymbol)s) ] <CLOSE_PARENTH>
    {
        if (argCount == -1 && s.getParametersCount() > 0)
            throw new YAPLException(CompilerError.TooFewArgs);
        return resultAttr;
    }
}

void Assignment() throws YAPLException :
{
    Token tIdent;
    IAttrib lvalue;
}
{
    tIdent=<IDENT> 
        {
            ISymbol s = symbolTable.lookup(tIdent);
            if (s.getKind() != ISymbol.Variable && s.getKind() != ISymbol.Parameter)
                throw new IllegalUseException(s, tIdent);
            lvalue = new Attrib(s);
        }
    [ lvalue = Selector(lvalue) ] <ASSIGN> Expr()
    {
        if (lvalue.isConstant())
            throw new YAPLException(CompilerError.ReadonlyAssign);
        if (!lvalue.isCompatible(rvalue))
            throw new YAPLException(CompilerError.TypeMismatchAssign);
    }
}

void IfStatement() throws YAPLException :
{
    IAttrib attr;
}
{
    <IF> attr = Expr()
    {
        if (!(attr.getType() instanceof BoolType))
            throw new YAPLException(CompilerError.CondNotBool);
    }
    <THEN> StatementList() [ <ELSE> StatementList() ] <ENDIF>
}

void WhileStatement() throws YAPLException :
{
    IAttrib attr;
}
{
    <WHILE> attr = Expr()
    {
        if (!(attr.getType() instanceof BoolType))
            throw new YAPLException(CompilerError.CondNotBool);
    }
    <DO> StatementList() <ENDWHILE>
}

void ReturnStatement() throws YAPLException :
{
    IAttrib retAttr = new Attrib(new VoidType, true);
}
{
    <RETURN> [ retAttr = Expr() ]
    {
        ISymbol s = SymbolTable.getNearestParentSymbol(ISymbol.Procedure);
        if (s == null)
            s = SymbolTable.getNearestParentSymbol(ISymbol.Program);
        s.setReturnSeen(true);
        if(!s.getType().isCompatible(retAttr))
            throw new YAPLException(CompilerError.InvalidReturnType);
    }
}

void WriteStatement() throws YAPLException :
{}
{
    <WRITE> <STRING>
}

void Statement() throws YAPLException :
{}
{
    IfStatement() | WhileStatement() | ReturnStatement() | WriteStatement() | LOOKAHEAD(3) Assignment() | ProcedureCall() | Block()
}

void StatementList() throws YAPLException :
{}
{
    ( Statement() <SEMICOLON> )*
}

void Block() throws YAPLException :
{}
{   { symbolTable.openScope(false); }
    [ Decl() ] <BEGIN> StatementList() <END>
    { symbolTable.closeScope(); }
}

Type StaticType() throws YAPLException :
{
    {info("Found: StaticType");}
    Token tIdent;
}
{
    <INT>
        {
            info("Found: <INT>");
            return new IntType();
        }

    | <BOOL>
        {
            info("Found: <BOOL>");
            return new BoolType();
        }

    | tIdent=<IDENT> 
        {
            ISymbol s = symbolTable.lookup(tIdent);
            if (s.getKind() != ISymbol.Typename) 
                throw new IllegalUseException(s, tIdent);
            info("Found: Typename " + s);
            return s.getType();
        }
}

/* Type = PrimType [ "[" "]" ] . */
Type Type() :
{
	{info("Found: Type");}
    Type t;
}
{
    t = PrimType()
    [
      <BRACKET_LEFT> <BRACKET_RIGHT>		{info("Found: <BRACKET_LEFT> <BRACKET_RIGHT>");}
      {
        t = new ArrayType(t);
      }
    ]
	{
	  return t;
	}
}

Type Type() throws YAPLException :
{
    info("Found: Type");
    Type t;
}
{
    t = StaticType()
    ( 
        <SQUARE_BRACKET_OPEN><SQUARE_BRACKET_CLOSE>
        t = new ArrayType(t);
    )*

    {
        return t;
    }
}

Type ReturnType() throws YAPLException :
{
    Type t;
}
{
    (
        <VOID> { t = new VoidType(); }
        | t = Type()
    )
    {
        return t;
    }
}

IAttrib ConstDecl() throws YAPLException :
{
    Token tIdent;
    IAttrib attr;
}
{
    <CONST> tIdent=<IDENT> 
        {
            ISymbol s = new Symbol(tIdent, ISymbol.Constant);
            symbolTable.addSymbol(s);               
        }
    <CONST_ASSIGN> attr=Literal() <SEMICOLON>
    {
        s.setType(attr.getType());
        return attr;
    }
}

void VarDecl() throws YAPLException :
{}
{
    VarDecl(null)
}

void VarDecl(ISymbol recordSymbol) throws YAPLException :
{
    Token tIdent;
    Type type;
}
{
    type = Type() tIdent=<IDENT> 
        {
            ISymbol s = new Symbol(tIdent, ISymbol.Variable);
            s.setType(type);
            symbolTable.addSymbol(s);
            if (recordSymbol != null)
                ((RecordType)recordSymbol.getType()).addMember(s);
        } 
    ( <COMMA> tIdent=<IDENT>
        {
            s = new Symbol(tIdent, ISymbol.Variable);
            s.setType(type);
            symbolTable.addSymbol(s);
            if (recordSymbol != null)
                ((RecordType)recordSymbol.getType()).addMember(s);
        }
    )* <SEMICOLON>
}

void TypeDecl() throws YAPLException :
{
    Token tIdent;
}
{
    <RECORD> tIdent=<IDENT>
        {
            ISymbol s = new Symbol(tIdent, ISymbol.Typename);
            RecordType rt = new RecordType();
            s.setType(rt);
            symbolTable.addSymbol(s);
            symbolTable.openScope(false);
        }
    (VarDecl(s) )+ 
        {
            symbolTable.closeScope();
        }
    <ENDRECORD> <SEMICOLON>
}

void Decl() throws YAPLException :
{}
{
    <DECLARE> ( ConstDecl() | VarDecl() | TypeDecl() )*
}

ISymbol FormalParam() throws YAPLException :
{
    Token tIdent;
    boolean readonly = false;
    Type type;
}
{
    [ <READONLY>
        {
            readonly = true;
        }
    ] type = Type()
        {
            if (readonly && !(type instanceof ArrayType || type instanceof RecordType))
                throw new YAPLException(CompilerError.ReadonlyNotArray);
        }
     tIdent=<IDENT>
        {
            ISymbol s = new Symbol(tIdent, ISymbol.Parameter);
            s.setType(type);
            s.setReadonly(readonly);
            symbolTable.addSymbol(s);
            return s;
        }
}

void FormalParamList(ProcedureSymbol proc) throws YAPLException :
{
    ISymbol param;
}
{
    param = FormalParam()
    {
        proc.addParameter(param);
    }
    (
        <COMMA> param = FormalParam()
        {
            proc.addParameter(param);
        }
    )*
}

void Procedure() throws YAPLException :
{
    Token tStartIdent;
    Token tEndIdent;
    Type retType;
    ProcedureSymbol s;
}
{
    <PROCEDURE> retType = ReturnType() tStartIdent=<IDENT>
        {
            s = new ProcedureSymbol(tStartIdent);
            s.setType(retType);
            symbolTable.addSymbol(s);
            symbolTable.openScope(false);
            symbolTable.addParentSymbol(s);
        }
    <OPEN_PARENTH> [ FormalParamList(s) ] <CLOSE_PARENTH> Block() tEndIdent=<IDENT>
        {
            if (!tEndIdent.image.equals(tStartIdent.image)) throw new ProcedureNameMismatchException(tStartIdent, tEndIdent);
            symbolTable.closeScope();            
        }
    <SEMICOLON>

    {
        if (!(s.getType() instanceof VoidType) && !s.getReturnSeen())
            throw new YAPLException(CompilerError.MissingReturn);
    }
}

void Program() throws YAPLException :
{
    Token tEndIdent;    
    ISymbol symProgram;
}
{
    <PROGRAM> tProgramName=<IDENT>
        {
            symbolTable.openScope(false);            
            symProgram = new Symbol(tProgramName, ISymbol.Program);
            symbolTable.setParentSymbol(symProgram);
            s.setType(new VoidType());
            symbolTable.openScope(true);            
        }
    ( Decl() | Procedure() )* <BEGIN> StatementList() <END> tEndIdent=<IDENT>
        {            
            if (!tEndIdent.image.equals(tProgramName.image)) throw new ProgramNameMismatchException(tProgramName, tEndIdent);
            symbolTable.closeScope();
            symbolTable.closeScope();            
        }
    <DOT>
}